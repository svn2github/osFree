Unified Interface
=================

Unified Interface (UNI) is API description file which used for generation of actual header,
include, unit, etc files for corresponding languages. UNI is much stricted in comparation of
standard C/C++ header files. This means less errors and easy support. Pascal-like syntax as
base is used with some modifications.

UNI files (.uni) can be converted to C/C++ header files (.h) using uni2h tool (see uni2h
documentation for more details). For Pascal units uni2pas tool can be used. Fortran
.fi and .fap files can be generated using uni2f. For REXX GCI uni2gci can be used.
Generation of assembler include files (.inc) use uni2inc. Other tools can be created
for different languages.

UNI bindings and real use
-------------------------

In general we have problems with real language construction and 'machine generated' bindings.
Read article about this at http://www.acm.org/tsc/apis.html. We have real problem and have no
actual solution for this. Human-writable code always will be better. So, main goal of UNI is
to provide generic way to provide base API bindings for different languages. C/C++ headers
not good solution for this because it is hard to automatically convert them to much stricted
languages like Pascal, Ada, etc. Same problems with other 'generic' languages like IDL and its
modifications. IDL files also hard to convert to languages with strict types.

So, UNI must be used for fast generation of 'generic' bindings with constructions less or more
same in different languages. For more 'advanced' bindings human-writable bindings must be used.
'Advanced' bindings must use 'generic' bindings as underline code.

Again, UNI is not solution but good tool for produce and maintain actual API bindings for
different languages.

UNI syntax
----------


[statament] optional;
<name> string or number;
(* comment *) ignored by parser;

1. UNI Module:

module <name>;

[stataments]

end.

Examples:

module os2;

uses os2def;

end.

2. List of used modules

Module can use another module. It is equal to #include directofe of C Preprocessor.

uses <name>;

Example:

module os2;

uses os2def;

end.

3. ....!!TODO!!....

